name: CI with Docker Compose

on:
  push:
    branches:
      - '*'  # Для всех веток
  pull_request:
    branches:
      - '*'  # Для всех веток

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  COMMON_IMAGES_VERSION: 1.0  # Исправлено
  TARGET_IMAGES_VERSION: 1.0  # Исправлено

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Установка docker-compose
      - name: Install docker-compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      # Логинимся в Docker Hub
      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Проверка логина
      - name: Verify Docker login
        run: docker info

      # Скачиваем образы перед запуском
      - name: Pull images before running containers
        run: |
          docker pull $DOCKER_USERNAME/grpc_server:1.0
          docker pull $DOCKER_USERNAME/cwbot:1.0

      - name: Create .env file
        run: |
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" > .env
          echo "COMMON_IMAGES_VERSION=${{ env.COMMON_IMAGES_VERSION }}" >> .env
          echo "TARGET_IMAGES_VERSION=${{ env.TARGET_IMAGES_VERSION }}" >> .env

      # Используем исправленный docker-compose.ci.yml
      - name: Start containers with Docker Compose
        run: |
          docker-compose -f docker-compose.ci.yml up -d

      # Ожидаем, пока gRPC сервер не будет в состоянии healthy
      - name: Wait for gRPC server to be healthy
        run: |
          for i in {1..10}; do
            if docker inspect --format='{{.State.Health.Status}}' $(docker ps -q -f "name=grpc_server") | grep -q "healthy"; then
              echo "gRPC server is healthy"
              exit 0
            fi
            echo "Waiting for gRPC server..."
            sleep 5
          done
          echo "gRPC server failed to start"
          exit 1

      # Проверяем, какие контейнеры запущены
      - name: Check running containers
        run: docker ps

      # Выводим логи контейнера cwbot
      - name: View container logs
        run: |
          container_id=$(docker ps -q -f "ancestor=${{ secrets.DOCKER_USERNAME }}/cwbot:${{ env.TARGET_IMAGES_VERSION }}")
          if [ -n "$container_id" ]; then
            docker logs $container_id
          else
            echo "No container found."
          fi

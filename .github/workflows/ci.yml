name: TGBot Workflow
on:
  push:
    branches:
      - CI
  pull_request:
    branches:
      - CI
jobs:
  build:
    runs-on: ubuntu-latest  # Для Ubuntu, но можно выбрать другие операционные системы

    steps:
      # Шаг 1: Проверяем исходный код из репозитория
      - name: Checkout code
        uses: actions/checkout@v2
          
      # Шаг 2: Установка зависимостей (если они есть)
      - name: Install dependencies
        run: |
          # ls -al
          sudo apt-get update
          sudo apt-get upgrade -y
          sudo apt-get install -y build-essential g++ make cmake libcurl4-openssl-dev libssl-dev libjsoncpp-dev git zlib1g-dev
          sudo apt-get install -y libboost-system-dev libboost-thread-dev libboost-program-options-dev libboost-test-dev
          sudo apt-get install -y libgtest-dev

          # Клонируем репозиторий
          git clone --depth 1 https://github.com/reo7sp/tgbot-cpp.git
          cd tgbot-cpp
          # Создаем директорию для установки

          # Конфигурируем CMake с пользовательским путем установки
          cmake . -DCMAKE_INSTALL_PREFIX=./
          # Собираем и устанавливаем проект
          make -j$(nproc)
          make install

      # Шаг 3: Создаем директорию для сборки
      - name: Build project
        run: |
          mkdir -p build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=./ -DTGBOT_CPP_INSTALL_PFEFIX=/home/runner/work/CursedWordsTGBot/CursedWordsTGBot/tgbot-cpp
          make -j$(nproc)

      # Шаг 6: Запуск тестов (если они есть)
      - name: Run tests
        run: |
          cd build
          ctest --verbose
          # mkdir -p ./CursedWordsTGBot
          # mkdir -p ./Tests/UnitTests/Queue_Tests
          # mkdir -p ./Tests/UnitTests/Parser_Tests
          # mkdir -p ./Tests/UnitTests/SignalHandler_Tests
          # cd Tests/UnitTests
          # ./Parser_Tests/parser_tests*
          # ./Queue_Tests/queue_tests*
          # ./SignalHandler_Tests/signalhandler_tests*
          # #./ThreadSafeQueue_Tests/threadsafequeue_test*

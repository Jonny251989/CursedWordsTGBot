name: CI/CD Pipeline

on:
  push:
    branches: ["**"]  # Для всех веток
  pull_request:
    branches: ["**"]  # Для всех PR

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  COMMON_IMAGES_VERSION: 1.0
  TARGET_IMAGES_VERSION: 1.0

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    steps:
      # Шаг 1: Получение кода
      - name: Checkout repository
        uses: actions/checkout@v3

      # Шаг 2: Настройка Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Шаг 3: Установка docker-compose
      - name: Install docker-compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      # Шаг 4: Авторизация в Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Шаг 5: Сборка и публикация образов
      - name: Build and push grpc_server
        run: |
          docker build \
            -t ${{ secrets.DOCKER_USERNAME }}/grpc_server:${{ env.COMMON_IMAGES_VERSION }} \
            -f ./common_images_python/Dockerfile.python .
          docker push ${{ secrets.DOCKER_USERNAME }}/grpc_server:${{ env.COMMON_IMAGES_VERSION }}

      - name: Build and push cwbot
        run: |
          docker build \
            -t ${{ secrets.DOCKER_USERNAME }}/cwbot:${{ env.TARGET_IMAGES_VERSION }} \
            -f ./Dockerfile.cwbot .
          docker push ${{ secrets.DOCKER_USERNAME }}/cwbot:${{ env.TARGET_IMAGES_VERSION }}

      # Шаг 6: Подготовка окружения
      - name: Create environment file
        run: |
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" > .env
          echo "COMMON_IMAGES_VERSION=${{ env.COMMON_IMAGES_VERSION }}" >> .env
          echo "TARGET_IMAGES_VERSION=${{ env.TARGET_IMAGES_VERSION }}" >> .env

      # Шаг 7: Запуск сервисов
      - name: Start containers
        run: docker-compose -f docker-compose.ci.yml up -d

      # Шаг 8: Проверка здоровья gRPC сервера
      - name: Healthcheck gRPC server
        run: |
          for i in {1..10}; do
            container_id=$(docker ps -q -f "name=grpc_server")
            health_status=$(docker inspect --format='{{.State.Health.Status}}' $container_id)
            
            if [ "$health_status" = "healthy" ]; then
              echo "gRPC server is ready"
              exit 0
            fi
            
            echo "Waiting for gRPC server... ($i/10)"
            sleep 5
          done
          echo "gRPC server healthcheck failed"
          exit 1

      # Шаг 9: Проверка работающих контейнеров
      - name: Verify running containers
        run: docker ps

      # Шаг 10: Логи приложения
      - name: Display bot logs
        run: |
          container_id=$(docker ps -q -f "ancestor=${{ secrets.DOCKER_USERNAME }}/cwbot")
          if [ -n "$container_id" ]; then
            docker logs $container_id
          else
            echo "Bot container not found"
            exit 1
          fi